# Git commands

############### Three stage architecture in Git #####################
working directory         staging area      .git directory
(modified)                (staged)             (committed)
          <--------------------------------- checkout of project
          -----------------> stage fixes
                                  -----------> commit
#####################################################################

Note: tracking of a project happens when its placed in .git directory

# create a git repository .git folder will be created in workspace
>> git init

# to track files and folders
>> git status

# to add a specific file to staging area
>> git add <file_name>

# to add all files from untracked to tracked (staging area)
>> git add .

# to commit files after being staged
>> git commit -m "commit_message"

# files which are in .git directory are untracked

############### Life cycle of a status of a file ####################
untracked         unmodified        modified        staged
    |-------------------------------------------------> add
                  |------------------> edit
                                       |--------------> stage
    remove <--------------|
                    commit <---------------------------|
#####################################################################

# to see different versions of commit
>> git log
>> git log --oneline

# to see in commit message user name and email
>> git config --global user.name myusername
>> git config --global user.email myemail

# to delete a git repository
>> rm -rf .git

# skip staging area
>> git commit -a -m "commit message"

# to know about git difference
It shows difference between current working directory wrt staged changes
>> git diff
>> git diff --staged

# not to tracks files are put under .gitignore

# suppose a file initial tracked by .git but later added in .gitignore it will still be unmodified
# to solve this issue
>> git rm --cached <file_name> # delete a file and stage changes

# unstage a file
>> git restore --staged <file_name>

# move a file to last commit
>> git checkout --file_name.txt

# rollback to last commit
>> git checkout -f

# setting alias
>> git config --global alias.st status
